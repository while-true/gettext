// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  CRASH
// DateTime: 1.6.2012 0:39:29
// UserName: rudi
// Input file <eval.y - 1.6.2012 0:39:26>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using GettextLib.ExpressionEvaluator;

namespace GettextLib.ExpressionEvaluator
{
internal enum Tokens {
    error=1,EOF=2,SEMICOLON=3,DIGIT=4,IDENTIFIER=5,LEFTPAR=6,
    RIGHTPAR=7,QUESTIONMARK=8,COLON=9,OR=10,AND=11,EQUALS=12,
    NOTEQUALS=13,LT=14,GT=15,LTEQUALS=16,GTEQUALS=17,MINUS=18,
    PLUS=19,MUL=20,DIV=21,PERCENT=22,NOT=23,ASSIGN=24};

internal partial struct ValueType
{
	internal int Int;
	internal string StringId;
	
	internal Assignment Assignment;
	internal List<Assignment> Assignments;
	
	internal Expr Expr;
	
	internal Literal Literal;
}
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[26];
  private static State[] states = new State[45];
  private static string[] nonTerms = new string[] {
      "Source", "AssigmentExpression", "AssigmentExpressions", "Expr", "ExprOr", 
      "ExprAnd", "ExprEqu", "ExprRel", "ExprMod", "ExprLiteral", "Literal", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{5,6},new int[]{-1,1,-3,3,-2,44});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{2,4,5,6},new int[]{-2,5});
    states[4] = new State(-2);
    states[5] = new State(-4);
    states[6] = new State(new int[]{24,7});
    states[7] = new State(new int[]{5,31,4,32,6,33},new int[]{-4,8,-5,10,-6,15,-7,18,-8,21,-9,24,-10,27,-11,30});
    states[8] = new State(new int[]{3,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{8,11,3,-7,9,-7,7,-7});
    states[11] = new State(new int[]{5,31,4,32,6,33},new int[]{-4,12,-5,10,-6,15,-7,18,-8,21,-9,24,-10,27,-11,30});
    states[12] = new State(new int[]{9,13});
    states[13] = new State(new int[]{5,31,4,32,6,33},new int[]{-4,14,-5,10,-6,15,-7,18,-8,21,-9,24,-10,27,-11,30});
    states[14] = new State(-6);
    states[15] = new State(new int[]{10,16,8,-9,3,-9,9,-9,7,-9});
    states[16] = new State(new int[]{5,31,4,32,6,33},new int[]{-5,17,-6,15,-7,18,-8,21,-9,24,-10,27,-11,30});
    states[17] = new State(-8);
    states[18] = new State(new int[]{11,19,10,-11,8,-11,3,-11,9,-11,7,-11});
    states[19] = new State(new int[]{5,31,4,32,6,33},new int[]{-6,20,-7,18,-8,21,-9,24,-10,27,-11,30});
    states[20] = new State(-10);
    states[21] = new State(new int[]{12,22,13,42,11,-14,10,-14,8,-14,3,-14,9,-14,7,-14});
    states[22] = new State(new int[]{5,31,4,32,6,33},new int[]{-8,23,-9,24,-10,27,-11,30});
    states[23] = new State(-12);
    states[24] = new State(new int[]{14,25,15,36,16,38,17,40,12,-19,13,-19,11,-19,10,-19,8,-19,3,-19,9,-19,7,-19});
    states[25] = new State(new int[]{5,31,4,32,6,33},new int[]{-9,26,-10,27,-11,30});
    states[26] = new State(-15);
    states[27] = new State(new int[]{22,28,14,-21,15,-21,16,-21,17,-21,12,-21,13,-21,11,-21,10,-21,8,-21,3,-21,9,-21,7,-21});
    states[28] = new State(new int[]{5,31,4,32,6,33},new int[]{-10,29,-11,30});
    states[29] = new State(-20);
    states[30] = new State(-22);
    states[31] = new State(-24);
    states[32] = new State(-25);
    states[33] = new State(new int[]{5,31,4,32,6,33},new int[]{-4,34,-5,10,-6,15,-7,18,-8,21,-9,24,-10,27,-11,30});
    states[34] = new State(new int[]{7,35});
    states[35] = new State(-23);
    states[36] = new State(new int[]{5,31,4,32,6,33},new int[]{-9,37,-10,27,-11,30});
    states[37] = new State(-16);
    states[38] = new State(new int[]{5,31,4,32,6,33},new int[]{-9,39,-10,27,-11,30});
    states[39] = new State(-17);
    states[40] = new State(new int[]{5,31,4,32,6,33},new int[]{-9,41,-10,27,-11,30});
    states[41] = new State(-18);
    states[42] = new State(new int[]{5,31,4,32,6,33},new int[]{-8,43,-9,24,-10,27,-11,30});
    states[43] = new State(-13);
    states[44] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-12, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3,2});
    rules[3] = new Rule(-3, new int[]{-2});
    rules[4] = new Rule(-3, new int[]{-3,-2});
    rules[5] = new Rule(-2, new int[]{5,24,-4,3});
    rules[6] = new Rule(-4, new int[]{-5,8,-4,9,-4});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-5, new int[]{-6,10,-5});
    rules[9] = new Rule(-5, new int[]{-6});
    rules[10] = new Rule(-6, new int[]{-7,11,-6});
    rules[11] = new Rule(-6, new int[]{-7});
    rules[12] = new Rule(-7, new int[]{-8,12,-8});
    rules[13] = new Rule(-7, new int[]{-8,13,-8});
    rules[14] = new Rule(-7, new int[]{-8});
    rules[15] = new Rule(-8, new int[]{-9,14,-9});
    rules[16] = new Rule(-8, new int[]{-9,15,-9});
    rules[17] = new Rule(-8, new int[]{-9,16,-9});
    rules[18] = new Rule(-8, new int[]{-9,17,-9});
    rules[19] = new Rule(-8, new int[]{-9});
    rules[20] = new Rule(-9, new int[]{-10,22,-10});
    rules[21] = new Rule(-9, new int[]{-10});
    rules[22] = new Rule(-10, new int[]{-11});
    rules[23] = new Rule(-10, new int[]{6,-4,7});
    rules[24] = new Rule(-11, new int[]{5});
    rules[25] = new Rule(-11, new int[]{4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Source -> AssigmentExpressions, EOF
{ Script = new Script(); Script.Assignments.AddRange(ValueStack[ValueStack.Depth-2].Assignments); }
        break;
      case 3: // AssigmentExpressions -> AssigmentExpression
{ CurrentSemanticValue.Assignments = new List<Assignment>(); CurrentSemanticValue.Assignments.Add(ValueStack[ValueStack.Depth-1].Assignment); }
        break;
      case 4: // AssigmentExpressions -> AssigmentExpressions, AssigmentExpression
{ ValueStack[ValueStack.Depth-2].Assignments.Add(ValueStack[ValueStack.Depth-1].Assignment); CurrentSemanticValue.Assignments = ValueStack[ValueStack.Depth-2].Assignments; }
        break;
      case 5: // AssigmentExpression -> IDENTIFIER, ASSIGN, Expr, SEMICOLON
{ CurrentSemanticValue.Assignment = new Assignment(ValueStack[ValueStack.Depth-4].StringId, ValueStack[ValueStack.Depth-2].Expr); }
        break;
      case 6: // Expr -> ExprOr, QUESTIONMARK, Expr, COLON, Expr
{ CurrentSemanticValue.Expr = new ExprIf(ValueStack[ValueStack.Depth-5].Expr, ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr); }
        break;
      case 7: // Expr -> ExprOr
{ CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
        break;
      case 8: // ExprOr -> ExprAnd, OR, ExprOr
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.Or); }
        break;
      case 9: // ExprOr -> ExprAnd
{ CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
        break;
      case 10: // ExprAnd -> ExprEqu, AND, ExprAnd
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.And); }
        break;
      case 11: // ExprAnd -> ExprEqu
{ CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
        break;
      case 12: // ExprEqu -> ExprRel, EQUALS, ExprRel
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.Equals); }
        break;
      case 13: // ExprEqu -> ExprRel, NOTEQUALS, ExprRel
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.NotEquals); }
        break;
      case 14: // ExprEqu -> ExprRel
{ CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
        break;
      case 15: // ExprRel -> ExprMod, LT, ExprMod
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.LessThan); }
        break;
      case 16: // ExprRel -> ExprMod, GT, ExprMod
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.GreaterThan); }
        break;
      case 17: // ExprRel -> ExprMod, LTEQUALS, ExprMod
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.LessThanOrEquals); }
        break;
      case 18: // ExprRel -> ExprMod, GTEQUALS, ExprMod
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.GreaterThanOrEquals); }
        break;
      case 19: // ExprRel -> ExprMod
{ CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
        break;
      case 20: // ExprMod -> ExprLiteral, PERCENT, ExprLiteral
{ CurrentSemanticValue.Expr = new ExprTwo(ValueStack[ValueStack.Depth-3].Expr, ValueStack[ValueStack.Depth-1].Expr, ExprTwo.OpEnum.Modulo); }
        break;
      case 21: // ExprMod -> ExprLiteral
{ CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; }
        break;
      case 22: // ExprLiteral -> Literal
{ CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Literal; }
        break;
      case 23: // ExprLiteral -> LEFTPAR, Expr, RIGHTPAR
{ CurrentSemanticValue.Expr = new ExprWrapper(ValueStack[ValueStack.Depth-2].Expr); }
        break;
      case 24: // Literal -> IDENTIFIER
{ CurrentSemanticValue.Literal = new LiteralVar(ValueStack[ValueStack.Depth-1].StringId); }
        break;
      case 25: // Literal -> DIGIT
{ CurrentSemanticValue.Literal = new LiteralNumber(ValueStack[ValueStack.Depth-1].Int); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


internal GettextLib.ExpressionEvaluator.Script Script { get; private set; }

public Parser(Scanner scn) : base(scn) { }                                                                                              
}
}
